#테이블형 수치 데이터
import numpy as np
numbers = np.array(range(1, 11), copy = True)
numbers

ones = np.ones([2, 4], dtype = np.float64)
ones

zeros = np.zeros([2, 4], dtypr = np.float64)
zeros

empty = np.empty([2, 4], dtype = np.float64)
empty

eye = np.eye(3)
eye

sap = np.array(["MMM", "ABT", "ABBV", "ACN", "ACE", "ATVI", "ADBE", "ADT"])
sap

#유니버셜 함수
import numpy as np
stocks = np.array([140.49, 0.97, 40.68, 41.53, 55.7, 57.21, 98.2, 99.19, 109.96, 111.47, 35.71, 36.27, 87.85, 89.11, 30.22, 30.91])
print(stocks)

import numpy as np
RATE = .0375
TERM = 30
simple = (  RATE * np.ones(TERM)).cumsum()
compound = ((1 + RATE) * np.ones(TERM)).cumprod() - 1

Z = np.ones((10,10))
Z[1:-1,1:-1] = 0
print(Z)

import numpy.random as rnd
rnd.seed(0)
rnd.uniform(low = 0.0, high = 1.0, size = None)

rnd.rand(2, 3)

rnd.randint(low = 0, high = 9, size = None)

rnd.normal(loc = 0.0, scale = 1.0, size = None)

rnd.randn(2, 3)

rnd.binomial(n = 3, p = 0.5, size = None)



import pandas as pd
from sklearn.metrics import confusion_matrix
import sklearn.linear_model as lm

clf = lm.LogisticRegression(C=10.0)

grades = pd.read_table("grades.csv")
labels = ('F', 'D', 'C', 'B', 'A')
grades["Letter"] = pd.cut(grades["Final score"], [0, 60, 70, 80, 90, 100], labels=labels)

X = grades[["Quiz 1", "Quiz 2"]]

clf.fit(X, grades["Letter"])
print("Score=%.f" % clf.score(X, grades["Letter"]))
cm = confusion_matrix(clf.predict(X), grades["Letter"])
print(pd.DataFrame(cm, columns=labels, index=labels))



import matplotlib, matplotlib.pyplot as plt
import pickle, pandas as pd
import sklearn.cluster, sklearn.preprocessing

alco2009 = pickle.load(open("alco2009.pickle", "rb"))

states = pd.read_csv("states.csv", names=("State", "Standrad", "Postal", "Capital"))
columns = ["Wine", "Beer"]

kmeans = sklearn.cluster.KMeans(n_clusters=9)
kmeans.fit(alco2009[columns])
alco2009["Clusters"] =kmeans.labels_
centers = pd.DataFrame(kmeans.cluster_centers_, columns=columns)

matplotlib.style.use("ggplot")

ax = alco2009.plot.scatter(columns[0], columns[1], c="Clusters", cmap=plt.cm.Accent, s=100)
centers.plot.scatter(columns[0], columns[1], color = "red", marker = "+", s = 200, ax = ax)

def add_abbr(state):
    _= ax.annotate(state["Postal"], state[columns], xytext = (1, 5), textcoords="offset points", size = 8, color = "darkslategery")

alco2009withStates = pd.concat([alco2009, states.set_index("State")], axis=1)
alco2009withStates.apply(add_abbr, axis = 1)

plt.title("US States Clustered by Alcohol Consumption")
plt.savefig("clusters.pdf")
